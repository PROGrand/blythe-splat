"use strict";class t{constructor(t=0,U=0,l=0){this.x=t,this.y=U,this.z=l}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}add(U){return"number"==typeof U?new t(this.x+U,this.y+U,this.z+U):new t(this.x+U.x,this.y+U.y,this.z+U.z)}subtract(U){return"number"==typeof U?new t(this.x-U,this.y-U,this.z-U):new t(this.x-U.x,this.y-U.y,this.z-U.z)}multiply(U){return"number"==typeof U?new t(this.x*U,this.y*U,this.z*U):U instanceof t?new t(this.x*U.x,this.y*U.y,this.z*U.z):new t(this.x*U.buffer[0]+this.y*U.buffer[4]+this.z*U.buffer[8]+U.buffer[12],this.x*U.buffer[1]+this.y*U.buffer[5]+this.z*U.buffer[9]+U.buffer[13],this.x*U.buffer[2]+this.y*U.buffer[6]+this.z*U.buffer[10]+U.buffer[14])}divide(U){return"number"==typeof U?new t(this.x/U,this.y/U,this.z/U):new t(this.x/U.x,this.y/U.y,this.z/U.z)}cross(U){const l=this.y*U.z-this.z*U.y,F=this.z*U.x-this.x*U.z,Q=this.x*U.y-this.y*U.x;return new t(l,F,Q)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lerp(U,l){return new t(this.x+(U.x-this.x)*l,this.y+(U.y-this.y)*l,this.z+(U.z-this.z)*l)}min(U){return new t(Math.min(this.x,U.x),Math.min(this.y,U.y),Math.min(this.z,U.z))}max(U){return new t(Math.max(this.x,U.x),Math.max(this.y,U.y),Math.max(this.z,U.z))}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(`Invalid component index: ${t}`)}}minComponent(){return this.x<this.y&&this.x<this.z?0:this.y<this.z?1:2}maxComponent(){return this.x>this.y&&this.x>this.z?0:this.y>this.z?1:2}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(t){return Math.sqrt((this.x-t.x)**2+(this.y-t.y)**2+(this.z-t.z)**2)}normalize(){const U=this.magnitude();return new t(this.x/U,this.y/U,this.z/U)}flat(){return[this.x,this.y,this.z]}clone(){return new t(this.x,this.y,this.z)}toString(){return`[${this.flat().join(", ")}]`}static One(U=1){return new t(U,U,U)}}class U{constructor(t=0,U=0,l=0,F=1){this.x=t,this.y=U,this.z=l,this.w=F}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z&&this.w===t.w}normalize(){const t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new U(this.x/t,this.y/t,this.z/t,this.w/t)}multiply(t){const l=this.w,F=this.x,Q=this.y,n=this.z,d=t.w,e=t.x,A=t.y,V=t.z;return new U(l*e+F*d+Q*V-n*A,l*A-F*V+Q*d+n*e,l*V+F*A-Q*e+n*d,l*d-F*e-Q*A-n*V)}inverse(){const t=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new U(-this.x/t,-this.y/t,-this.z/t,this.w/t)}apply(l){const F=new U(l.x,l.y,l.z,0),Q=new U(-this.x,-this.y,-this.z,this.w),n=this.multiply(F).multiply(Q);return new t(n.x,n.y,n.z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new U(this.x,this.y,this.z,this.w)}static FromEuler(t){const l=t.x/2,F=t.y/2,Q=t.z/2,n=Math.cos(F),d=Math.sin(F),e=Math.cos(l),A=Math.sin(l),V=Math.cos(Q),B=Math.sin(Q);return new U(n*A*V+d*e*B,d*e*V-n*A*B,n*e*B-d*A*V,n*e*V+d*A*B)}toEuler(){const U=2*(this.w*this.x+this.y*this.z),l=1-2*(this.x*this.x+this.y*this.y),F=Math.atan2(U,l);let Q;const n=2*(this.w*this.y-this.z*this.x);Q=Math.abs(n)>=1?Math.sign(n)*Math.PI/2:Math.asin(n);const d=2*(this.w*this.z+this.x*this.y),e=1-2*(this.y*this.y+this.z*this.z),A=Math.atan2(d,e);return new t(F,Q,A)}static FromMatrix3(t){const l=t.buffer,F=l[0]+l[4]+l[8];let Q,n,d,e;if(F>0){const t=.5/Math.sqrt(F+1);e=.25/t,Q=(l[7]-l[5])*t,n=(l[2]-l[6])*t,d=(l[3]-l[1])*t}else if(l[0]>l[4]&&l[0]>l[8]){const t=2*Math.sqrt(1+l[0]-l[4]-l[8]);e=(l[7]-l[5])/t,Q=.25*t,n=(l[1]+l[3])/t,d=(l[2]+l[6])/t}else if(l[4]>l[8]){const t=2*Math.sqrt(1+l[4]-l[0]-l[8]);e=(l[2]-l[6])/t,Q=(l[1]+l[3])/t,n=.25*t,d=(l[5]+l[7])/t}else{const t=2*Math.sqrt(1+l[8]-l[0]-l[4]);e=(l[3]-l[1])/t,Q=(l[2]+l[6])/t,n=(l[5]+l[7])/t,d=.25*t}return new U(Q,n,d,e)}static FromAxisAngle(t,l){const F=l/2,Q=Math.sin(F),n=Math.cos(F);return new U(t.x*Q,t.y*Q,t.z*Q,n)}static LookRotation(l){const F=new t(0,0,1),Q=F.dot(l);if(Math.abs(Q- -1)<1e-6)return new U(0,1,0,Math.PI);if(Math.abs(Q-1)<1e-6)return new U;const n=Math.acos(Q),d=F.cross(l).normalize();return U.FromAxisAngle(d,n)}toString(){return`[${this.flat().join(", ")}]`}}class l{constructor(){const t=new Map;this.addEventListener=(U,l)=>{t.has(U)||t.set(U,new Set),t.get(U).add(l)},this.removeEventListener=(U,l)=>{t.has(U)&&t.get(U).delete(l)},this.hasEventListener=(U,l)=>!!t.has(U)&&t.get(U).has(l),this.dispatchEvent=U=>{if(t.has(U.type))for(const l of t.get(U.type))l(U)}}}class F{constructor(t=1,U=0,l=0,F=0,Q=0,n=1,d=0,e=0,A=0,V=0,B=1,Z=0,a=0,R=0,i=0,s=1){this.buffer=[t,U,l,F,Q,n,d,e,A,V,B,Z,a,R,i,s]}equals(t){if(this.buffer.length!==t.buffer.length)return!1;if(this.buffer===t.buffer)return!0;for(let U=0;U<this.buffer.length;U++)if(this.buffer[U]!==t.buffer[U])return!1;return!0}multiply(t){const U=this.buffer,l=t.buffer;return new F(l[0]*U[0]+l[1]*U[4]+l[2]*U[8]+l[3]*U[12],l[0]*U[1]+l[1]*U[5]+l[2]*U[9]+l[3]*U[13],l[0]*U[2]+l[1]*U[6]+l[2]*U[10]+l[3]*U[14],l[0]*U[3]+l[1]*U[7]+l[2]*U[11]+l[3]*U[15],l[4]*U[0]+l[5]*U[4]+l[6]*U[8]+l[7]*U[12],l[4]*U[1]+l[5]*U[5]+l[6]*U[9]+l[7]*U[13],l[4]*U[2]+l[5]*U[6]+l[6]*U[10]+l[7]*U[14],l[4]*U[3]+l[5]*U[7]+l[6]*U[11]+l[7]*U[15],l[8]*U[0]+l[9]*U[4]+l[10]*U[8]+l[11]*U[12],l[8]*U[1]+l[9]*U[5]+l[10]*U[9]+l[11]*U[13],l[8]*U[2]+l[9]*U[6]+l[10]*U[10]+l[11]*U[14],l[8]*U[3]+l[9]*U[7]+l[10]*U[11]+l[11]*U[15],l[12]*U[0]+l[13]*U[4]+l[14]*U[8]+l[15]*U[12],l[12]*U[1]+l[13]*U[5]+l[14]*U[9]+l[15]*U[13],l[12]*U[2]+l[13]*U[6]+l[14]*U[10]+l[15]*U[14],l[12]*U[3]+l[13]*U[7]+l[14]*U[11]+l[15]*U[15])}clone(){const t=this.buffer;return new F(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}determinant(){const t=this.buffer;return t[12]*t[9]*t[6]*t[3]-t[8]*t[13]*t[6]*t[3]-t[12]*t[5]*t[10]*t[3]+t[4]*t[13]*t[10]*t[3]+t[8]*t[5]*t[14]*t[3]-t[4]*t[9]*t[14]*t[3]-t[12]*t[9]*t[2]*t[7]+t[8]*t[13]*t[2]*t[7]+t[12]*t[1]*t[10]*t[7]-t[0]*t[13]*t[10]*t[7]-t[8]*t[1]*t[14]*t[7]+t[0]*t[9]*t[14]*t[7]+t[12]*t[5]*t[2]*t[11]-t[4]*t[13]*t[2]*t[11]-t[12]*t[1]*t[6]*t[11]+t[0]*t[13]*t[6]*t[11]+t[4]*t[1]*t[14]*t[11]-t[0]*t[5]*t[14]*t[11]-t[8]*t[5]*t[2]*t[15]+t[4]*t[9]*t[2]*t[15]+t[8]*t[1]*t[6]*t[15]-t[0]*t[9]*t[6]*t[15]-t[4]*t[1]*t[10]*t[15]+t[0]*t[5]*t[10]*t[15]}invert(){const t=this.buffer,U=this.determinant();if(0===U)throw new Error("Matrix is not invertible.");const l=1/U;return new F(l*(t[5]*t[10]*t[15]-t[5]*t[11]*t[14]-t[9]*t[6]*t[15]+t[9]*t[7]*t[14]+t[13]*t[6]*t[11]-t[13]*t[7]*t[10]),l*(-t[1]*t[10]*t[15]+t[1]*t[11]*t[14]+t[9]*t[2]*t[15]-t[9]*t[3]*t[14]-t[13]*t[2]*t[11]+t[13]*t[3]*t[10]),l*(t[1]*t[6]*t[15]-t[1]*t[7]*t[14]-t[5]*t[2]*t[15]+t[5]*t[3]*t[14]+t[13]*t[2]*t[7]-t[13]*t[3]*t[6]),l*(-t[1]*t[6]*t[11]+t[1]*t[7]*t[10]+t[5]*t[2]*t[11]-t[5]*t[3]*t[10]-t[9]*t[2]*t[7]+t[9]*t[3]*t[6]),l*(-t[4]*t[10]*t[15]+t[4]*t[11]*t[14]+t[8]*t[6]*t[15]-t[8]*t[7]*t[14]-t[12]*t[6]*t[11]+t[12]*t[7]*t[10]),l*(t[0]*t[10]*t[15]-t[0]*t[11]*t[14]-t[8]*t[2]*t[15]+t[8]*t[3]*t[14]+t[12]*t[2]*t[11]-t[12]*t[3]*t[10]),l*(-t[0]*t[6]*t[15]+t[0]*t[7]*t[14]+t[4]*t[2]*t[15]-t[4]*t[3]*t[14]-t[12]*t[2]*t[7]+t[12]*t[3]*t[6]),l*(t[0]*t[6]*t[11]-t[0]*t[7]*t[10]-t[4]*t[2]*t[11]+t[4]*t[3]*t[10]+t[8]*t[2]*t[7]-t[8]*t[3]*t[6]),l*(t[4]*t[9]*t[15]-t[4]*t[11]*t[13]-t[8]*t[5]*t[15]+t[8]*t[7]*t[13]+t[12]*t[5]*t[11]-t[12]*t[7]*t[9]),l*(-t[0]*t[9]*t[15]+t[0]*t[11]*t[13]+t[8]*t[1]*t[15]-t[8]*t[3]*t[13]-t[12]*t[1]*t[11]+t[12]*t[3]*t[9]),l*(t[0]*t[5]*t[15]-t[0]*t[7]*t[13]-t[4]*t[1]*t[15]+t[4]*t[3]*t[13]+t[12]*t[1]*t[7]-t[12]*t[3]*t[5]),l*(-t[0]*t[5]*t[11]+t[0]*t[7]*t[9]+t[4]*t[1]*t[11]-t[4]*t[3]*t[9]-t[8]*t[1]*t[7]+t[8]*t[3]*t[5]),l*(-t[4]*t[9]*t[14]+t[4]*t[10]*t[13]+t[8]*t[5]*t[14]-t[8]*t[6]*t[13]-t[12]*t[5]*t[10]+t[12]*t[6]*t[9]),l*(t[0]*t[9]*t[14]-t[0]*t[10]*t[13]-t[8]*t[1]*t[14]+t[8]*t[2]*t[13]+t[12]*t[1]*t[10]-t[12]*t[2]*t[9]),l*(-t[0]*t[5]*t[14]+t[0]*t[6]*t[13]+t[4]*t[1]*t[14]-t[4]*t[2]*t[13]-t[12]*t[1]*t[6]+t[12]*t[2]*t[5]),l*(t[0]*t[5]*t[10]-t[0]*t[6]*t[9]-t[4]*t[1]*t[10]+t[4]*t[2]*t[9]+t[8]*t[1]*t[6]-t[8]*t[2]*t[5]))}static Compose(t,U,l){const Q=U.x,n=U.y,d=U.z,e=U.w,A=Q+Q,V=n+n,B=d+d,Z=Q*A,a=Q*V,R=Q*B,i=n*V,s=n*B,c=d*B,W=e*A,h=e*V,o=e*B,r=l.x,I=l.y,m=l.z;return new F((1-(i+c))*r,(a+o)*r,(R-h)*r,0,(a-o)*I,(1-(Z+c))*I,(s+W)*I,0,(R+h)*m,(s-W)*m,(1-(Z+i))*m,0,t.x,t.y,t.z,1)}toString(){return`[${this.buffer.join(", ")}]`}}class Q extends Event{constructor(t){super("objectAdded"),this.object=t}}class n extends Event{constructor(t){super("objectRemoved"),this.object=t}}class d extends Event{constructor(t){super("objectChanged"),this.object=t}}class e extends l{constructor(){super(),this.positionChanged=!1,this.rotationChanged=!1,this.scaleChanged=!1,this._position=new t,this._rotation=new U,this._scale=new t(1,1,1),this._transform=new F,this._changeEvent=new d(this),this.update=()=>{},this.applyPosition=()=>{this.position=new t},this.applyRotation=()=>{this.rotation=new U},this.applyScale=()=>{this.scale=new t(1,1,1)},this.raiseChangeEvent=()=>{this.dispatchEvent(this._changeEvent)}}_updateMatrix(){this._transform=F.Compose(this._position,this._rotation,this._scale)}get position(){return this._position}set position(t){this._position.equals(t)||(this._position=t,this.positionChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(t){this._rotation.equals(t)||(this._rotation=t,this.rotationChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get scale(){return this._scale}set scale(t){this._scale.equals(t)||(this._scale=t,this.scaleChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get forward(){let U=new t(0,0,1);return U=this.rotation.apply(U),U}get transform(){return this._transform}}class A{constructor(t=1,U=0,l=0,F=0,Q=1,n=0,d=0,e=0,A=1){this.buffer=[t,U,l,F,Q,n,d,e,A]}equals(t){if(this.buffer.length!==t.buffer.length)return!1;if(this.buffer===t.buffer)return!0;for(let U=0;U<this.buffer.length;U++)if(this.buffer[U]!==t.buffer[U])return!1;return!0}multiply(t){const U=this.buffer,l=t.buffer;return new A(l[0]*U[0]+l[3]*U[1]+l[6]*U[2],l[1]*U[0]+l[4]*U[1]+l[7]*U[2],l[2]*U[0]+l[5]*U[1]+l[8]*U[2],l[0]*U[3]+l[3]*U[4]+l[6]*U[5],l[1]*U[3]+l[4]*U[4]+l[7]*U[5],l[2]*U[3]+l[5]*U[4]+l[8]*U[5],l[0]*U[6]+l[3]*U[7]+l[6]*U[8],l[1]*U[6]+l[4]*U[7]+l[7]*U[8],l[2]*U[6]+l[5]*U[7]+l[8]*U[8])}clone(){const t=this.buffer;return new A(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])}static Eye(t=1){return new A(t,0,0,0,t,0,0,0,t)}static Diagonal(t){return new A(t.x,0,0,0,t.y,0,0,0,t.z)}static RotationFromQuaternion(t){return new A(1-2*t.y*t.y-2*t.z*t.z,2*t.x*t.y-2*t.z*t.w,2*t.x*t.z+2*t.y*t.w,2*t.x*t.y+2*t.z*t.w,1-2*t.x*t.x-2*t.z*t.z,2*t.y*t.z-2*t.x*t.w,2*t.x*t.z-2*t.y*t.w,2*t.y*t.z+2*t.x*t.w,1-2*t.x*t.x-2*t.y*t.y)}static RotationFromEuler(t){const U=Math.cos(t.x),l=Math.sin(t.x),F=Math.cos(t.y),Q=Math.sin(t.y),n=Math.cos(t.z),d=Math.sin(t.z);return new A(...[F*n+Q*l*d,-F*d+Q*l*n,Q*U,U*d,U*n,-l,-Q*n+F*l*d,Q*d+F*l*n,F*U])}toString(){return`[${this.buffer.join(", ")}]`}}class V{constructor(t=0,l=null,F=null,Q=null,n=null){this.changed=!1,this.detached=!1,this._vertexCount=t,this._positions=l||new Float32Array(0),this._rotations=F||new Float32Array(0),this._scales=Q||new Float32Array(0),this._colors=n||new Uint8Array(0),this._selection=new Uint8Array(this.vertexCount),this.translate=t=>{for(let U=0;U<this.vertexCount;U++)this.positions[3*U+0]+=t.x,this.positions[3*U+1]+=t.y,this.positions[3*U+2]+=t.z;this.changed=!0},this.rotate=t=>{const l=A.RotationFromQuaternion(t).buffer;for(let F=0;F<this.vertexCount;F++){const Q=this.positions[3*F+0],n=this.positions[3*F+1],d=this.positions[3*F+2];this.positions[3*F+0]=l[0]*Q+l[1]*n+l[2]*d,this.positions[3*F+1]=l[3]*Q+l[4]*n+l[5]*d,this.positions[3*F+2]=l[6]*Q+l[7]*n+l[8]*d;const e=new U(this.rotations[4*F+1],this.rotations[4*F+2],this.rotations[4*F+3],this.rotations[4*F+0]),A=t.multiply(e);this.rotations[4*F+1]=A.x,this.rotations[4*F+2]=A.y,this.rotations[4*F+3]=A.z,this.rotations[4*F+0]=A.w}this.changed=!0},this.scale=t=>{for(let U=0;U<this.vertexCount;U++)this.positions[3*U+0]*=t.x,this.positions[3*U+1]*=t.y,this.positions[3*U+2]*=t.z,this.scales[3*U+0]*=t.x,this.scales[3*U+1]*=t.y,this.scales[3*U+2]*=t.z;this.changed=!0},this.serialize=()=>{const t=new Uint8Array(this.vertexCount*V.RowLength),U=new Float32Array(t.buffer),l=new Uint8Array(t.buffer);for(let F=0;F<this.vertexCount;F++)U[8*F+0]=this.positions[3*F+0],U[8*F+1]=this.positions[3*F+1],U[8*F+2]=this.positions[3*F+2],l[32*F+24+0]=this.colors[4*F+0],l[32*F+24+1]=this.colors[4*F+1],l[32*F+24+2]=this.colors[4*F+2],l[32*F+24+3]=this.colors[4*F+3],U[8*F+3+0]=this.scales[3*F+0],U[8*F+3+1]=this.scales[3*F+1],U[8*F+3+2]=this.scales[3*F+2],l[32*F+28+0]=128*this.rotations[4*F+0]+128&255,l[32*F+28+1]=128*this.rotations[4*F+1]+128&255,l[32*F+28+2]=128*this.rotations[4*F+2]+128&255,l[32*F+28+3]=128*this.rotations[4*F+3]+128&255;return t},this.reattach=(t,U,l,F,Q)=>{console.assert(t.byteLength===3*this.vertexCount*4,`Expected ${3*this.vertexCount*4} bytes, got ${t.byteLength} bytes`),this._positions=new Float32Array(t),this._rotations=new Float32Array(U),this._scales=new Float32Array(l),this._colors=new Uint8Array(F),this._selection=new Uint8Array(Q),this.detached=!1}}static Deserialize(t){const U=t.length/V.RowLength,l=new Float32Array(3*U),F=new Float32Array(4*U),Q=new Float32Array(3*U),n=new Uint8Array(4*U),d=new Float32Array(t.buffer),e=new Uint8Array(t.buffer);for(let A=0;A<U;A++)l[3*A+0]=d[8*A+0],l[3*A+1]=d[8*A+1],l[3*A+2]=d[8*A+2],F[4*A+0]=(e[32*A+28+0]-128)/128,F[4*A+1]=(e[32*A+28+1]-128)/128,F[4*A+2]=(e[32*A+28+2]-128)/128,F[4*A+3]=(e[32*A+28+3]-128)/128,Q[3*A+0]=d[8*A+3+0],Q[3*A+1]=d[8*A+3+1],Q[3*A+2]=d[8*A+3+2],n[4*A+0]=e[32*A+24+0],n[4*A+1]=e[32*A+24+1],n[4*A+2]=e[32*A+24+2],n[4*A+3]=e[32*A+24+3];return new V(U,l,F,Q,n)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}get selection(){return this._selection}}V.RowLength=32;class B{constructor(t,U,l,F,Q){this._vertexCount=t,this._positions=U,this._data=l,this._width=F,this._height=Q,this.serialize=()=>new Uint8Array(this._data.buffer)}static Deserialize(t,U,l){const F=new Uint32Array(t.buffer),Q=new Float32Array(t.buffer),n=Math.floor(Q.byteLength/this.RowLength),d=new Float32Array(3*n);for(let e=0;e<n;e++)d[3*e+0]=Q[16*e+0],d[3*e+1]=Q[16*e+1],d[3*e+2]=Q[16*e+2],d[3*e+0]=Q[16*e+3];return new B(n,d,F,U,l)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get data(){return this._data}get width(){return this._width}get height(){return this._height}}B.RowLength=64;class Z{static SplatToPLY(t,l){let F="ply\nformat binary_little_endian 1.0\n";F+=`element vertex ${l}\n`;const Q=["x","y","z","nx","ny","nz","f_dc_0","f_dc_1","f_dc_2"];for(let U=0;U<45;U++)Q.push(`f_rest_${U}`);Q.push("opacity"),Q.push("scale_0"),Q.push("scale_1"),Q.push("scale_2"),Q.push("rot_0"),Q.push("rot_1"),Q.push("rot_2"),Q.push("rot_3");for(const U of Q)F+=`property float ${U}\n`;F+="end_header\n";const n=(new TextEncoder).encode(F),d=248,e=l*d,A=new DataView(new ArrayBuffer(n.length+e));new Uint8Array(A.buffer).set(n,0);const V=new Float32Array(t),B=new Uint8Array(t),Z=n.length,a=232;for(let R=0;R<l;R++){const t=V[8*R+0],l=V[8*R+1],F=V[8*R+2],Q=(B[32*R+24+0]/255-.5)/this.SH_C0,n=(B[32*R+24+1]/255-.5)/this.SH_C0,e=(B[32*R+24+2]/255-.5)/this.SH_C0,i=B[32*R+24+3]/255,s=Math.log(i/(1-i)),c=Math.log(V[8*R+3+0]),W=Math.log(V[8*R+3+1]),h=Math.log(V[8*R+3+2]);let o=new U((B[32*R+28+1]-128)/128,(B[32*R+28+2]-128)/128,(B[32*R+28+3]-128)/128,(B[32*R+28+0]-128)/128);o=o.normalize();const r=o.w,I=o.x,m=o.y,J=o.z;A.setFloat32(Z+d*R+0,t,!0),A.setFloat32(Z+d*R+4,l,!0),A.setFloat32(Z+d*R+8,F,!0),A.setFloat32(Z+d*R+24+0,Q,!0),A.setFloat32(Z+d*R+24+4,n,!0),A.setFloat32(Z+d*R+24+8,e,!0),A.setFloat32(Z+d*R+216,s,!0),A.setFloat32(Z+d*R+220+0,c,!0),A.setFloat32(Z+d*R+220+4,W,!0),A.setFloat32(Z+d*R+220+8,h,!0),A.setFloat32(Z+d*R+a+0,r,!0),A.setFloat32(Z+d*R+a+4,I,!0),A.setFloat32(Z+d*R+a+8,m,!0),A.setFloat32(Z+d*R+a+12,J,!0)}return A.buffer}}Z.SH_C0=.28209479177387814;class a{constructor(t,U){this.min=t,this.max=U}contains(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}intersects(t){return this.max.x>=t.min.x&&this.min.x<=t.max.x&&this.max.y>=t.min.y&&this.min.y<=t.max.y&&this.max.z>=t.min.z&&this.min.z<=t.max.z}size(){return this.max.subtract(this.min)}center(){return this.min.add(this.max).divide(2)}expand(t){this.min=this.min.min(t),this.max=this.max.max(t)}permute(){const U=this.min,l=this.max;this.min=new t(Math.min(U.x,l.x),Math.min(U.y,l.y),Math.min(U.z,l.z)),this.max=new t(Math.max(U.x,l.x),Math.max(U.y,l.y),Math.max(U.z,l.z))}}class R extends e{constructor(l=void 0){super(),this.selectedChanged=!1,this.colorTransformChanged=!1,this._selected=!1,this._colorTransforms=[],this._colorTransformsMap=new Map,this._data=l||new V,this._bounds=new a(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0)),this.recalculateBounds=()=>{this._bounds=new a(new t(1/0,1/0,1/0),new t(-1/0,-1/0,-1/0));for(let U=0;U<this._data.vertexCount;U++)this._bounds.expand(new t(this._data.positions[3*U],this._data.positions[3*U+1],this._data.positions[3*U+2]))},this.applyPosition=()=>{this.data.translate(this.position),this.position=new t},this.applyRotation=()=>{this.data.rotate(this.rotation),this.rotation=new U},this.applyScale=()=>{this.data.scale(this.scale),this.scale=new t(1,1,1)},this.recalculateBounds()}saveToFile(t=null,U=null){if(!document)return;if(U){if("splat"!==U&&"ply"!==U)throw new Error("Invalid format. Must be 'splat' or 'ply'")}else U="splat";if(!t){const l=new Date;t=`splat-${l.getFullYear()}-${l.getMonth()+1}-${l.getDate()}.${U}`}this.applyRotation(),this.applyScale(),this.applyPosition();const l=this.data.serialize();let F;if("ply"===U){const t=Z.SplatToPLY(l.buffer,this.data.vertexCount);F=new Blob([t],{type:"application/octet-stream"})}else F=new Blob([l.buffer],{type:"application/octet-stream"});const Q=document.createElement("a");Q.download=t,Q.href=URL.createObjectURL(F),Q.click()}get data(){return this._data}get selected(){return this._selected}set selected(t){this._selected!==t&&(this._selected=t,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent))}get colorTransforms(){return this._colorTransforms}get colorTransformsMap(){return this._colorTransformsMap}get bounds(){let t=this._bounds.center();t=t.add(this.position);let U=this._bounds.size();return U=U.multiply(this.scale),new a(t.subtract(U.divide(2)),t.add(U.divide(2)))}}class i extends e{constructor(t){super(),this._data=t}get data(){return this._data}}class s{constructor(){this._fx=1132,this._fy=1132,this._near=.1,this._far=100,this._width=512,this._height=512,this._projectionMatrix=new F,this._viewMatrix=new F,this._viewProj=new F,this._updateProjectionMatrix=()=>{this._projectionMatrix=new F(2*this.fx/this.width,0,0,0,0,-2*this.fy/this.height,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.update=(t,U)=>{const l=A.RotationFromQuaternion(U).buffer,Q=t.flat();this._viewMatrix=new F(l[0],l[1],l[2],0,l[3],l[4],l[5],0,l[6],l[7],l[8],0,-Q[0]*l[0]-Q[1]*l[3]-Q[2]*l[6],-Q[0]*l[1]-Q[1]*l[4]-Q[2]*l[7],-Q[0]*l[2]-Q[1]*l[5]-Q[2]*l[8],1),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.setSize=(t,U)=>{this._width=t,this._height=U,this._updateProjectionMatrix()}}get fx(){return this._fx}set fx(t){this._fx!==t&&(this._fx=t,this._updateProjectionMatrix())}get fy(){return this._fy}set fy(t){this._fy!==t&&(this._fy=t,this._updateProjectionMatrix())}get near(){return this._near}set near(t){this._near!==t&&(this._near=t,this._updateProjectionMatrix())}get far(){return this._far}set far(t){this._far!==t&&(this._far=t,this._updateProjectionMatrix())}get width(){return this._width}get height(){return this._height}get projectionMatrix(){return this._projectionMatrix}get viewMatrix(){return this._viewMatrix}get viewProj(){return this._viewProj}}class c{constructor(t=0,U=0,l=0,F=0){this.x=t,this.y=U,this.z=l,this.w=F}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z&&this.w===t.w}add(t){return"number"==typeof t?new c(this.x+t,this.y+t,this.z+t,this.w+t):new c(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}subtract(t){return"number"==typeof t?new c(this.x-t,this.y-t,this.z-t,this.w-t):new c(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}multiply(t){return"number"==typeof t?new c(this.x*t,this.y*t,this.z*t,this.w*t):t instanceof c?new c(this.x*t.x,this.y*t.y,this.z*t.z,this.w*t.w):new c(this.x*t.buffer[0]+this.y*t.buffer[4]+this.z*t.buffer[8]+this.w*t.buffer[12],this.x*t.buffer[1]+this.y*t.buffer[5]+this.z*t.buffer[9]+this.w*t.buffer[13],this.x*t.buffer[2]+this.y*t.buffer[6]+this.z*t.buffer[10]+this.w*t.buffer[14],this.x*t.buffer[3]+this.y*t.buffer[7]+this.z*t.buffer[11]+this.w*t.buffer[15])}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lerp(t,U){return new c(this.x+(t.x-this.x)*U,this.y+(t.y-this.y)*U,this.z+(t.z-this.z)*U,this.w+(t.w-this.w)*U)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}distanceTo(t){return Math.sqrt((this.x-t.x)**2+(this.y-t.y)**2+(this.z-t.z)**2+(this.w-t.w)**2)}normalize(){const t=this.magnitude();return new c(this.x/t,this.y/t,this.z/t,this.w/t)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new c(this.x,this.y,this.z,this.w)}toString(){return`[${this.flat().join(", ")}]`}}async function W(t,U){const l=await fetch(t,{mode:"cors",credentials:"omit",cache:U?"force-cache":"default"});if(200!=l.status)throw new Error(l.status+" Unable to load "+l.url);return l}async function h(t,U){return t.headers.has("content-length")?async function(t,U){const l=t.body.getReader(),F=parseInt(t.headers.get("content-length")),Q=new Uint8Array(F);let n=0;for(;;){const{done:t,value:d}=await l.read();if(t)break;Q.set(d,n),n+=d.length,null==U||U(n/F)}return Q}(t,U):async function(t,U){const l=t.body.getReader(),F=[];let Q=0;for(;;){const{done:t,value:U}=await l.read();if(t)break;F.push(U),Q+=U.length}const n=new Uint8Array(Q);let d=0;for(const e of F)n.set(e,d),d+=e.length,null==U||U(d/Q);return n}(t,U)}function o(t,U,l){var F;return function(U){return F=F||function(t){var U=atob(t),l=U.indexOf("\n",10)+1,F=U.substring(l)+"",Q=new Blob([F],{type:"application/javascript"});return URL.createObjectURL(Q)}(t),new Worker(F,U)}}var r=o("");class I{constructor(t,U){this._scene=null,this._camera=null,this._started=!1,this._initialized=!1,this._renderer=t;const l=t.gl;this._program=l.createProgram(),this._passes=U||[];const F=l.createShader(l.VERTEX_SHADER);l.shaderSource(F,this._getVertexSource()),l.compileShader(F),l.getShaderParameter(F,l.COMPILE_STATUS)||console.error(l.getShaderInfoLog(F));const Q=l.createShader(l.FRAGMENT_SHADER);l.shaderSource(Q,this._getFragmentSource()),l.compileShader(Q),l.getShaderParameter(Q,l.COMPILE_STATUS)||console.error(l.getShaderInfoLog(Q)),l.attachShader(this.program,F),l.attachShader(this.program,Q),l.linkProgram(this.program),l.getProgramParameter(this.program,l.LINK_STATUS)||console.error(l.getProgramInfoLog(this.program)),this.resize=()=>{l.useProgram(this._program),this._resize()},this.initialize=()=>{console.assert(!this._initialized,"ShaderProgram already initialized"),l.useProgram(this._program),this._initialize();for(const t of this.passes)t.initialize(this);this._initialized=!0,this._started=!0},this.render=(t,U)=>{l.useProgram(this._program),this._scene===t&&this._camera===U||(this.dispose(),this._scene=t,this._camera=U,this.initialize());for(const l of this.passes)l.render();this._render()},this.dispose=()=>{if(this._initialized){l.useProgram(this._program);for(const t of this.passes)t.dispose();this._dispose(),this._scene=null,this._camera=null,this._initialized=!1}}}get renderer(){return this._renderer}get scene(){return this._scene}get camera(){return this._camera}get program(){return this._program}get passes(){return this._passes}get started(){return this._started}}var m=o(""),J=function(t={}){var U,l,F=t;F.ready=new Promise(((t,F)=>{U=t,l=F}));var Q,n=Object.assign({},F),d="";d=0!==(d=self.location.href).indexOf("blob:")?d.substr(0,d.replace(/[?#].*/,"").lastIndexOf("/")+1):"",Q=t=>{var U=new XMLHttpRequest;return U.open("GET",t,!1),U.responseType="arraybuffer",U.send(null),new Uint8Array(U.response)},F.print||console.log.bind(console);var e,A,V=F.printErr||console.error.bind(console);Object.assign(F,n),n=null,F.arguments&&F.arguments,F.thisProgram&&F.thisProgram,F.quit&&F.quit,F.wasmBinary&&(e=F.wasmBinary),"object"!=typeof WebAssembly&&C("no native wasm support detected");var B,Z,a,R,i,s,c,W,h=!1;function o(){var t=A.buffer;F.HEAP8=B=new Int8Array(t),F.HEAP16=a=new Int16Array(t),F.HEAPU8=Z=new Uint8Array(t),F.HEAPU16=R=new Uint16Array(t),F.HEAP32=i=new Int32Array(t),F.HEAPU32=s=new Uint32Array(t),F.HEAPF32=c=new Float32Array(t),F.HEAPF64=W=new Float64Array(t)}var r=[],I=[],m=[],J=0,b=null;function C(t){F.onAbort&&F.onAbort(t),V(t="Aborted("+t+")"),h=!0,t+=". Build with -sASSERTIONS for more info.";var U=new WebAssembly.RuntimeError(t);throw l(U),U}var g,N,G="data:application/octet-stream;base64,",X=t=>t.startsWith(G);function p(t,U,l){return(F=t,Promise.resolve().then((()=>function(t){if(t==g&&e)return new Uint8Array(e);var U=function(t){if(X(t))return function(t){for(var U=atob(t),l=new Uint8Array(U.length),F=0;F<U.length;++F)l[F]=U.charCodeAt(F);return l}(t.slice(37))}(t);if(U)return U;if(Q)return Q(t);throw"both async and sync fetching of the wasm failed"}(F)))).then((t=>WebAssembly.instantiate(t,U))).then((t=>t)).then(l,(t=>{V(`failed to asynchronously prepare wasm: ${t}`),C(t)}));var F}X(g="data:application/octet-stream;base64,")||(N=g,g=F.locateFile?F.locateFile(N,d):d+N);var E=t=>{for(;t.length>0;)t.shift()(F)};F.noExitRuntime;var y,S,Y=t=>{for(var U="",l=t;Z[l];)U+=y[Z[l++]];return U},u={},k={},T=t=>{throw new S(t)};function H(t,U,l={}){if(!("argPackAdvance"in U))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(t,U,l={}){var F=U.name;if(t||T(`type "${F}" must have a positive integer typeid pointer`),k.hasOwnProperty(t)){if(l.ignoreDuplicateRegistrations)return;T(`Cannot register type '${F}' twice`)}if(k[t]=U,u.hasOwnProperty(t)){var Q=u[t];delete u[t],Q.forEach((t=>t()))}}(t,U,l)}function x(){this.allocated=[void 0],this.freelist=[]}var D=new x;function f(t){return this.fromWireType(i[t>>2])}var w=(t,U)=>{switch(U){case 4:return function(t){return this.fromWireType(c[t>>2])};case 8:return function(t){return this.fromWireType(W[t>>3])};default:throw new TypeError(`invalid float width (${U}): ${t}`)}},v=(t,U,l)=>{switch(U){case 1:return l?t=>B[t|0]:t=>Z[t|0];case 2:return l?t=>a[t>>1]:t=>R[t>>1];case 4:return l?t=>i[t>>2]:t=>s[t>>2];default:throw new TypeError(`invalid integer width (${U}): ${t}`)}};function z(t){return this.fromWireType(s[t>>2])}var M="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,K=(t,U)=>t?((t,U,l)=>{for(var F=U+l,Q=U;t[Q]&&!(Q>=F);)++Q;if(Q-U>16&&t.buffer&&M)return M.decode(t.subarray(U,Q));for(var n="";U<Q;){var d=t[U++];if(128&d){var e=63&t[U++];if(192!=(224&d)){var A=63&t[U++];if((d=224==(240&d)?(15&d)<<12|e<<6|A:(7&d)<<18|e<<12|A<<6|63&t[U++])<65536)n+=String.fromCharCode(d);else{var V=d-65536;n+=String.fromCharCode(55296|V>>10,56320|1023&V)}}else n+=String.fromCharCode((31&d)<<6|e)}else n+=String.fromCharCode(d)}return n})(Z,t,U):"",j="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,O=(t,U)=>{for(var l=t,F=l>>1,Q=F+U/2;!(F>=Q)&&R[F];)++F;if((l=F<<1)-t>32&&j)return j.decode(Z.subarray(t,l));for(var n="",d=0;!(d>=U/2);++d){var e=a[t+2*d>>1];if(0==e)break;n+=String.fromCharCode(e)}return n},L=(t,U,l)=>{if(void 0===l&&(l=2147483647),l<2)return 0;for(var F=U,Q=(l-=2)<2*t.length?l/2:t.length,n=0;n<Q;++n){var d=t.charCodeAt(n);a[U>>1]=d,U+=2}return a[U>>1]=0,U-F},P=t=>2*t.length,_=(t,U)=>{for(var l=0,F="";!(l>=U/4);){var Q=i[t+4*l>>2];if(0==Q)break;if(++l,Q>=65536){var n=Q-65536;F+=String.fromCharCode(55296|n>>10,56320|1023&n)}else F+=String.fromCharCode(Q)}return F},q=(t,U,l)=>{if(void 0===l&&(l=2147483647),l<4)return 0;for(var F=U,Q=F+l-4,n=0;n<t.length;++n){var d=t.charCodeAt(n);if(d>=55296&&d<=57343&&(d=65536+((1023&d)<<10)|1023&t.charCodeAt(++n)),i[U>>2]=d,(U+=4)+4>Q)break}return i[U>>2]=0,U-F},$=t=>{for(var U=0,l=0;l<t.length;++l){var F=t.charCodeAt(l);F>=55296&&F<=57343&&++l,U+=4}return U},tt=t=>{var U=(t-A.buffer.byteLength+65535)/65536;try{return A.grow(U),o(),1}catch(l){}};(()=>{for(var t=new Array(256),U=0;U<256;++U)t[U]=String.fromCharCode(U);y=t})(),S=F.BindingError=class extends Error{constructor(t){super(t),this.name="BindingError"}},F.InternalError=class extends Error{constructor(t){super(t),this.name="InternalError"}},Object.assign(x.prototype,{get(t){return this.allocated[t]},has(t){return void 0!==this.allocated[t]},allocate(t){var U=this.freelist.pop()||this.allocated.length;return this.allocated[U]=t,U},free(t){this.allocated[t]=void 0,this.freelist.push(t)}}),D.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),D.reserved=D.allocated.length,F.count_emval_handles=()=>{for(var t=0,U=D.reserved;U<D.allocated.length;++U)void 0!==D.allocated[U]&&++t;return t};var Ut={f:(t,U,l,F,Q)=>{},i:(t,U,l,F)=>{H(t,{name:U=Y(U),fromWireType:function(t){return!!t},toWireType:function(t,U){return U?l:F},argPackAdvance:8,readValueFromPointer:function(t){return this.fromWireType(Z[t])},destructorFunction:null})},h:(t,U)=>{H(t,{name:U=Y(U),fromWireType:t=>{var U,l=(t=>(t||T("Cannot use deleted val. handle = "+t),D.get(t).value))(t);return(U=t)>=D.reserved&&0==--D.get(U).refcount&&D.free(U),l},toWireType:(t,U)=>(t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return D.allocate({refcount:1,value:t})}})(U),argPackAdvance:8,readValueFromPointer:f,destructorFunction:null})},e:(t,U,l)=>{H(t,{name:U=Y(U),fromWireType:t=>t,toWireType:(t,U)=>U,argPackAdvance:8,readValueFromPointer:w(U,l),destructorFunction:null})},b:(t,U,l,F,Q)=>{U=Y(U);var n=t=>t;if(0===F){var d=32-8*l;n=t=>t<<d>>>d}var e=U.includes("unsigned");H(t,{name:U,fromWireType:n,toWireType:e?function(t,U){return this.name,U>>>0}:function(t,U){return this.name,U},argPackAdvance:8,readValueFromPointer:v(U,l,0!==F),destructorFunction:null})},a:(t,U,l)=>{var F=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][U];function Q(t){var U=s[t>>2],l=s[t+4>>2];return new F(B.buffer,l,U)}H(t,{name:l=Y(l),fromWireType:Q,argPackAdvance:8,readValueFromPointer:Q},{ignoreDuplicateRegistrations:!0})},d:(t,U)=>{var l="std::string"===(U=Y(U));H(t,{name:U,fromWireType(t){var U,F=s[t>>2],Q=t+4;if(l)for(var n=Q,d=0;d<=F;++d){var e=Q+d;if(d==F||0==Z[e]){var A=K(n,e-n);void 0===U?U=A:(U+=String.fromCharCode(0),U+=A),n=e+1}}else{var V=new Array(F);for(d=0;d<F;++d)V[d]=String.fromCharCode(Z[Q+d]);U=V.join("")}return nt(t),U},toWireType(t,U){var F;U instanceof ArrayBuffer&&(U=new Uint8Array(U));var Q="string"==typeof U;Q||U instanceof Uint8Array||U instanceof Uint8ClampedArray||U instanceof Int8Array||T("Cannot pass non-string to std::string"),F=l&&Q?(t=>{for(var U=0,l=0;l<t.length;++l){var F=t.charCodeAt(l);F<=127?U++:F<=2047?U+=2:F>=55296&&F<=57343?(U+=4,++l):U+=3}return U})(U):U.length;var n=Qt(4+F+1),d=n+4;if(s[n>>2]=F,l&&Q)((t,U,l,F)=>{if(!(F>0))return 0;for(var Q=l+F-1,n=0;n<t.length;++n){var d=t.charCodeAt(n);if(d>=55296&&d<=57343&&(d=65536+((1023&d)<<10)|1023&t.charCodeAt(++n)),d<=127){if(l>=Q)break;U[l++]=d}else if(d<=2047){if(l+1>=Q)break;U[l++]=192|d>>6,U[l++]=128|63&d}else if(d<=65535){if(l+2>=Q)break;U[l++]=224|d>>12,U[l++]=128|d>>6&63,U[l++]=128|63&d}else{if(l+3>=Q)break;U[l++]=240|d>>18,U[l++]=128|d>>12&63,U[l++]=128|d>>6&63,U[l++]=128|63&d}}U[l]=0})(U,Z,d,F+1);else if(Q)for(var e=0;e<F;++e){var A=U.charCodeAt(e);A>255&&(nt(d),T("String has UTF-16 code units that do not fit in 8 bits")),Z[d+e]=A}else for(e=0;e<F;++e)Z[d+e]=U[e];return null!==t&&t.push(nt,n),n},argPackAdvance:8,readValueFromPointer:z,destructorFunction(t){nt(t)}})},c:(t,U,l)=>{var F,Q,n,d,e;l=Y(l),2===U?(F=O,Q=L,d=P,n=()=>R,e=1):4===U&&(F=_,Q=q,d=$,n=()=>s,e=2),H(t,{name:l,fromWireType:t=>{for(var l,Q=s[t>>2],d=n(),A=t+4,V=0;V<=Q;++V){var B=t+4+V*U;if(V==Q||0==d[B>>e]){var Z=F(A,B-A);void 0===l?l=Z:(l+=String.fromCharCode(0),l+=Z),A=B+U}}return nt(t),l},toWireType:(t,F)=>{"string"!=typeof F&&T(`Cannot pass non-string to C++ string type ${l}`);var n=d(F),A=Qt(4+n+U);return s[A>>2]=n>>e,Q(F,A+4,n+U),null!==t&&t.push(nt,A),A},argPackAdvance:8,readValueFromPointer:f,destructorFunction(t){nt(t)}})},j:(t,U)=>{H(t,{isVoid:!0,name:U=Y(U),argPackAdvance:0,fromWireType:()=>{},toWireType:(t,U)=>{}})},g:t=>{var U=Z.length,l=2147483648;if((t>>>=0)>l)return!1;for(var F,Q=1;Q<=4;Q*=2){var n=U*(1+.2/Q);n=Math.min(n,t+100663296);var d=Math.min(l,(F=Math.max(t,n))+(65536-F%65536)%65536);if(tt(d))return!0}return!1}},lt=function(){var t,U,Q,n={a:Ut};function d(t,U){var l;return lt=t.exports,A=lt.k,o(),l=lt.l,I.unshift(l),function(){if(J--,F.monitorRunDependencies&&F.monitorRunDependencies(J),0==J&&b){var t=b;b=null,t()}}(),lt}if(J++,F.monitorRunDependencies&&F.monitorRunDependencies(J),F.instantiateWasm)try{return F.instantiateWasm(n,d)}catch(e){V(`Module.instantiateWasm callback failed with error: ${e}`),l(e)}return(t=g,U=n,Q=function(t){d(t.instance)},p(t,U,Q)).catch(l),{}}();F._pack=(t,U,l,Q,n,d,e,A,V,B,Z)=>(F._pack=lt.m)(t,U,l,Q,n,d,e,A,V,B,Z),F.__embind_initialize_bindings=()=>(F.__embind_initialize_bindings=lt.n)();var Ft,Qt=F._malloc=t=>(Qt=F._malloc=lt.p)(t),nt=F._free=t=>(nt=F._free=lt.q)(t);function dt(){function t(){Ft||(Ft=!0,F.calledRun=!0,h||(E(I),U(F),F.onRuntimeInitialized&&F.onRuntimeInitialized(),function(){if(F.postRun)for("function"==typeof F.postRun&&(F.postRun=[F.postRun]);F.postRun.length;)t=F.postRun.shift(),m.unshift(t);var t;E(m)}()))}J>0||(function(){if(F.preRun)for("function"==typeof F.preRun&&(F.preRun=[F.preRun]);F.preRun.length;)t=F.preRun.shift(),r.unshift(t);var t;E(r)}(),J>0||(F.setStatus?(F.setStatus("Running..."),setTimeout((function(){setTimeout((function(){F.setStatus("")}),1),t()}),1)):t()))}if(b=function t(){Ft||dt(),Ft||(b=t)},F.preInit)for("function"==typeof F.preInit&&(F.preInit=[F.preInit]);F.preInit.length>0;)F.preInit.pop()();return dt(),t.ready};class b{constructor(t){this.dataChanged=!1,this.transformsChanged=!1,this.colorTransformsChanged=!1,this._updating=new Set,this._dirty=new Set;let U=0,l=0;this._splatIndices=new Map,this._offsets=new Map;const Q=new Map;for(const F of t.objects)F instanceof R&&(this._splatIndices.set(F,l),this._offsets.set(F,U),Q.set(U,F),U+=F.data.vertexCount,l++);this._vertexCount=U,this._width=2048,this._height=Math.ceil(2*this.vertexCount/this.width),this._data=new Uint32Array(this.width*this.height*4),this._transformsWidth=5,this._transformsHeight=Q.size,this._transforms=new Float32Array(this._transformsWidth*this._transformsHeight*4),this._transformIndicesWidth=1024,this._transformIndicesHeight=Math.ceil(this.vertexCount/this._transformIndicesWidth),this._transformIndices=new Uint32Array(this._transformIndicesWidth*this._transformIndicesHeight),this._colorTransformsWidth=4,this._colorTransformsHeight=64,this._colorTransforms=new Float32Array(this._colorTransformsWidth*this._colorTransformsHeight*4),this._colorTransforms.fill(0),this._colorTransforms[0]=1,this._colorTransforms[5]=1,this._colorTransforms[10]=1,this._colorTransforms[15]=1,this._colorTransformIndicesWidth=1024,this._colorTransformIndicesHeight=Math.ceil(this.vertexCount/this._colorTransformIndicesWidth),this._colorTransformIndices=new Uint32Array(this._colorTransformIndicesWidth*this._colorTransformIndicesHeight),this.colorTransformIndices.fill(0),this._positions=new Float32Array(3*this.vertexCount),this._rotations=new Float32Array(4*this.vertexCount),this._scales=new Float32Array(3*this.vertexCount),this._worker=new m;const n=t=>{const U=this._splatIndices.get(t);this._transforms.set(t.transform.buffer,20*U),this._transforms[20*U+16]=t.selected?1:0,t.positionChanged=!1,t.rotationChanged=!1,t.scaleChanged=!1,t.selectedChanged=!1,this.transformsChanged=!0},d=()=>{let t=!1;for(const F of this._splatIndices.keys())if(F.colorTransformChanged){t=!0;break}if(!t)return;const U=[new F];this._colorTransformIndices.fill(0);let l=1;for(const F of this._splatIndices.keys()){const t=this._offsets.get(F);for(const Q of F.colorTransforms)U.includes(Q)||(U.push(Q),l++);for(const U of F.colorTransformsMap.keys()){const Q=F.colorTransformsMap.get(U);this._colorTransformIndices[U+t]=Q+l-1}F.colorTransformChanged=!1}for(let F=0;F<U.length;F++){const t=U[F];this._colorTransforms.set(t.buffer,16*F)}this.colorTransformsChanged=!0};let e;this._worker.onmessage=t=>{if(t.data.response){const U=t.data.response,l=Q.get(U.offset);n(l),d();const F=this._splatIndices.get(l);for(let t=0;t<l.data.vertexCount;t++)this._transformIndices[U.offset+t]=F;this._data.set(U.data,8*U.offset),l.data.reattach(U.positions,U.rotations,U.scales,U.colors,U.selection),this._positions.set(U.worldPositions,3*U.offset),this._rotations.set(U.worldRotations,4*U.offset),this._scales.set(U.worldScales,3*U.offset),this._updating.delete(l),l.selectedChanged=!1,this.dataChanged=!0}},async function(){e=await J()}();const A=t=>{if(!e)return void async function(){for(;!e;)await new Promise((t=>setTimeout(t,0)))}().then((()=>{A(t)}));n(t);const U=e._malloc(3*t.data.vertexCount*4),l=e._malloc(4*t.data.vertexCount*4),F=e._malloc(3*t.data.vertexCount*4),Q=e._malloc(4*t.data.vertexCount),d=e._malloc(t.data.vertexCount),V=e._malloc(8*t.data.vertexCount*4),B=e._malloc(3*t.data.vertexCount*4),Z=e._malloc(4*t.data.vertexCount*4),a=e._malloc(3*t.data.vertexCount*4);e.HEAPF32.set(t.data.positions,U/4),e.HEAPF32.set(t.data.rotations,l/4),e.HEAPF32.set(t.data.scales,F/4),e.HEAPU8.set(t.data.colors,Q),e.HEAPU8.set(t.data.selection,d),e._pack(t.selected,t.data.vertexCount,U,l,F,Q,d,V,B,Z,a);const R=new Uint32Array(e.HEAPU32.buffer,V,8*t.data.vertexCount),i=new Float32Array(e.HEAPF32.buffer,B,3*t.data.vertexCount),s=new Float32Array(e.HEAPF32.buffer,Z,4*t.data.vertexCount),c=new Float32Array(e.HEAPF32.buffer,a,3*t.data.vertexCount),W=this._splatIndices.get(t),h=this._offsets.get(t);for(let n=0;n<t.data.vertexCount;n++)this._transformIndices[h+n]=W;this._data.set(R,8*h),this._positions.set(i,3*h),this._rotations.set(s,4*h),this._scales.set(c,3*h),e._free(U),e._free(l),e._free(F),e._free(Q),e._free(d),e._free(V),e._free(B),e._free(Z),e._free(a),this.dataChanged=!0,this.colorTransformsChanged=!0},V=t=>{if((t.positionChanged||t.rotationChanged||t.scaleChanged||t.selectedChanged)&&n(t),t.colorTransformChanged&&d(),!t.data.changed||t.data.detached)return;const U={position:new Float32Array(t.position.flat()),rotation:new Float32Array(t.rotation.flat()),scale:new Float32Array(t.scale.flat()),selected:t.selected,vertexCount:t.data.vertexCount,positions:t.data.positions,rotations:t.data.rotations,scales:t.data.scales,colors:t.data.colors,selection:t.data.selection,offset:this._offsets.get(t)};this._worker.postMessage({splat:U},[U.position.buffer,U.rotation.buffer,U.scale.buffer,U.positions.buffer,U.rotations.buffer,U.scales.buffer,U.colors.buffer,U.selection.buffer]),this._updating.add(t),t.data.detached=!0};this.getSplat=t=>{let U=null;for(const[l,F]of this._offsets){if(!(t>=F))break;U=l}return U},this.getLocalIndex=(t,U)=>U-this._offsets.get(t),this.markDirty=t=>{this._dirty.add(t)},this.rebuild=()=>{for(const t of this._dirty)V(t);this._dirty.clear()},this.dispose=()=>{this._worker.terminate()};for(const F of this._splatIndices.keys())A(F);d()}get offsets(){return this._offsets}get data(){return this._data}get width(){return this._width}get height(){return this._height}get transforms(){return this._transforms}get transformsWidth(){return this._transformsWidth}get transformsHeight(){return this._transformsHeight}get transformIndices(){return this._transformIndices}get transformIndicesWidth(){return this._transformIndicesWidth}get transformIndicesHeight(){return this._transformIndicesHeight}get colorTransforms(){return this._colorTransforms}get colorTransformsWidth(){return this._colorTransformsWidth}get colorTransformsHeight(){return this._colorTransformsHeight}get colorTransformIndices(){return this._colorTransformIndices}get colorTransformIndicesWidth(){return this._colorTransformIndicesWidth}get colorTransformIndicesHeight(){return this._colorTransformIndicesHeight}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get vertexCount(){return this._vertexCount}get needsRebuild(){return this._dirty.size>0}get updating(){return this._updating.size>0}}class C{constructor(t=0,U=0,l=0,F=255){this.r=t,this.g=U,this.b=l,this.a=F}flat(){return[this.r,this.g,this.b,this.a]}flatNorm(){return[this.r/255,this.g/255,this.b/255,this.a/255]}toHexString(){return"#"+this.flat().map((t=>t.toString(16).padStart(2,"0"))).join("")}toString(){return`[${this.flat().join(", ")}]`}}class g extends I{constructor(t,U){super(t,U),this._outlineThickness=10,this._outlineColor=new C(255,165,0,255),this._renderData=null,this._depthIndex=new Uint32Array,this._splatTexture=null,this._worker=null;const l=t.canvas,F=t.gl;let Q,n,d,e,A,V,B,Z,a,i,s,c,W,h,o,I,m,J,g;this._resize=()=>{this._camera&&(this._camera.data.setSize(l.width,l.height),this._camera.update(),Q=F.getUniformLocation(this.program,"projection"),F.uniformMatrix4fv(Q,!1,this._camera.data.projectionMatrix.buffer),n=F.getUniformLocation(this.program,"viewport"),F.uniform2fv(n,new Float32Array([l.width,l.height])))};const N=()=>{this._worker=new r,this._worker.onmessage=t=>{if(t.data.depthIndex){const{depthIndex:U}=t.data;this._depthIndex=U,F.bindBuffer(F.ARRAY_BUFFER,g),F.bufferData(F.ARRAY_BUFFER,U,F.STATIC_DRAW)}}};this._initialize=()=>{if(this._scene&&this._camera){this._resize(),this._scene.addEventListener("objectAdded",G),this._scene.addEventListener("objectRemoved",X);for(const t of this._scene.objects)t instanceof R&&t.addEventListener("objectChanged",p);this._renderData=new b(this._scene),d=F.getUniformLocation(this.program,"focal"),F.uniform2fv(d,new Float32Array([this._camera.data.fx,this._camera.data.fy])),e=F.getUniformLocation(this.program,"view"),F.uniformMatrix4fv(e,!1,this._camera.data.viewMatrix.buffer),i=F.getUniformLocation(this.program,"outlineThickness"),F.uniform1f(i,this.outlineThickness),s=F.getUniformLocation(this.program,"outlineColor"),F.uniform4fv(s,new Float32Array(this.outlineColor.flatNorm())),this._splatTexture=F.createTexture(),A=F.getUniformLocation(this.program,"u_texture"),F.uniform1i(A,0),h=F.createTexture(),V=F.getUniformLocation(this.program,"u_transforms"),F.uniform1i(V,1),o=F.createTexture(),B=F.getUniformLocation(this.program,"u_transformIndices"),F.uniform1i(B,2),I=F.createTexture(),Z=F.getUniformLocation(this.program,"u_colorTransforms"),F.uniform1i(Z,3),m=F.createTexture(),a=F.getUniformLocation(this.program,"u_colorTransformIndices"),F.uniform1i(a,4),J=F.createBuffer(),F.bindBuffer(F.ARRAY_BUFFER,J),F.bufferData(F.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),F.STATIC_DRAW),c=F.getAttribLocation(this.program,"position"),F.enableVertexAttribArray(c),F.vertexAttribPointer(c,2,F.FLOAT,!1,0,0),g=F.createBuffer(),W=F.getAttribLocation(this.program,"index"),F.enableVertexAttribArray(W),F.bindBuffer(F.ARRAY_BUFFER,g),N()}else console.error("Cannot render without scene and camera")};const G=t=>{const U=t;U.object instanceof R&&U.object.addEventListener("objectChanged",p),this.dispose()},X=t=>{const U=t;U.object instanceof R&&U.object.removeEventListener("objectChanged",p),this.dispose()},p=t=>{const U=t;U.object instanceof R&&this._renderData&&this._renderData.markDirty(U.object)};this._render=()=>{var t,U;if(this._scene&&this._camera&&this.renderData){if(this.renderData.needsRebuild&&this.renderData.rebuild(),this.renderData.dataChanged||this.renderData.transformsChanged||this.renderData.colorTransformsChanged){this.renderData.dataChanged&&(F.activeTexture(F.TEXTURE0),F.bindTexture(F.TEXTURE_2D,this.splatTexture),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,F.NEAREST),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,F.NEAREST),F.texImage2D(F.TEXTURE_2D,0,F.RGBA32UI,this.renderData.width,this.renderData.height,0,F.RGBA_INTEGER,F.UNSIGNED_INT,this.renderData.data)),this.renderData.transformsChanged&&(F.activeTexture(F.TEXTURE1),F.bindTexture(F.TEXTURE_2D,h),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,F.NEAREST),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,F.NEAREST),F.texImage2D(F.TEXTURE_2D,0,F.RGBA32F,this.renderData.transformsWidth,this.renderData.transformsHeight,0,F.RGBA,F.FLOAT,this.renderData.transforms),F.activeTexture(F.TEXTURE2),F.bindTexture(F.TEXTURE_2D,o),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,F.NEAREST),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,F.NEAREST),F.texImage2D(F.TEXTURE_2D,0,F.R32UI,this.renderData.transformIndicesWidth,this.renderData.transformIndicesHeight,0,F.RED_INTEGER,F.UNSIGNED_INT,this.renderData.transformIndices)),this.renderData.colorTransformsChanged&&(F.activeTexture(F.TEXTURE3),F.bindTexture(F.TEXTURE_2D,I),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,F.NEAREST),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,F.NEAREST),F.texImage2D(F.TEXTURE_2D,0,F.RGBA32F,this.renderData.colorTransformsWidth,this.renderData.colorTransformsHeight,0,F.RGBA,F.FLOAT,this.renderData.colorTransforms),F.activeTexture(F.TEXTURE4),F.bindTexture(F.TEXTURE_2D,m),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,F.NEAREST),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,F.NEAREST),F.texImage2D(F.TEXTURE_2D,0,F.R32UI,this.renderData.colorTransformIndicesWidth,this.renderData.colorTransformIndicesHeight,0,F.RED_INTEGER,F.UNSIGNED_INT,this.renderData.colorTransformIndices));const U=new Float32Array(this.renderData.positions.slice().buffer),l=new Float32Array(this.renderData.transforms.slice().buffer),Q=new Uint32Array(this.renderData.transformIndices.slice().buffer);null===(t=this._worker)||void 0===t||t.postMessage({sortData:{positions:U,transforms:l,transformIndices:Q,vertexCount:this.renderData.vertexCount}},[U.buffer,l.buffer,Q.buffer]),this.renderData.dataChanged=!1,this.renderData.transformsChanged=!1,this.renderData.colorTransformsChanged=!1}this._camera.update(),null===(U=this._worker)||void 0===U||U.postMessage({viewProj:this._camera.data.viewProj.buffer}),F.viewport(0,0,l.width,l.height),F.clearColor(0,0,0,0),F.clear(F.COLOR_BUFFER_BIT),F.disable(F.DEPTH_TEST),F.enable(F.BLEND),F.blendFuncSeparate(F.ONE_MINUS_DST_ALPHA,F.ONE,F.ONE_MINUS_DST_ALPHA,F.ONE),F.blendEquationSeparate(F.FUNC_ADD,F.FUNC_ADD),F.uniformMatrix4fv(Q,!1,this._camera.data.projectionMatrix.buffer),F.uniformMatrix4fv(e,!1,this._camera.data.viewMatrix.buffer),F.bindBuffer(F.ARRAY_BUFFER,J),F.vertexAttribPointer(c,2,F.FLOAT,!1,0,0),F.bindBuffer(F.ARRAY_BUFFER,g),F.bufferData(F.ARRAY_BUFFER,this.depthIndex,F.STATIC_DRAW),F.vertexAttribIPointer(W,1,F.INT,0,0),F.vertexAttribDivisor(W,1),F.drawArraysInstanced(F.TRIANGLE_FAN,0,4,this.renderData.vertexCount)}else console.error("Cannot render without scene and camera")},this._dispose=()=>{var t;if(this._scene&&this._camera&&this.renderData){this._scene.removeEventListener("objectAdded",G),this._scene.removeEventListener("objectRemoved",X);for(const t of this._scene.objects)t instanceof R&&t.removeEventListener("objectChanged",p);null===(t=this._worker)||void 0===t||t.terminate(),this.renderData.dispose(),F.deleteTexture(this.splatTexture),F.deleteTexture(h),F.deleteTexture(o),F.deleteBuffer(g),F.deleteBuffer(J)}else console.error("Cannot dispose without scene and camera")},this._setOutlineThickness=t=>{this._outlineThickness=t,this._initialized&&F.uniform1f(i,t)},this._setOutlineColor=t=>{this._outlineColor=t,this._initialized&&F.uniform4fv(s,new Float32Array(t.flatNorm()))}}get renderData(){return this._renderData}get depthIndex(){return this._depthIndex}get splatTexture(){return this._splatTexture}get outlineThickness(){return this._outlineThickness}set outlineThickness(t){this._setOutlineThickness(t)}get outlineColor(){return this._outlineColor}set outlineColor(t){this._setOutlineColor(t)}get worker(){return this._worker}_getVertexSource(){return"#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform highp sampler2D u_colorTransforms;\nuniform highp usampler2D u_colorTransformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    //ref: https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/main/cuda_rasterizer/forward.cu#L110-L111\n    cov2d[0][0] += 0.3;\n    cov2d[1][1] += 0.3;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    uint colorTransformIndex = texelFetch(u_colorTransformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 colorTransform = mat4(\n        texelFetch(u_colorTransforms, ivec2(0, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(1, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(2, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(3, colorTransformIndex), 0)\n    );\n\n    vec4 color = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vColor = colorTransform * color;\n\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n"}}class N{constructor(t=1){let U,l,F,Q,n=0,d=!1;this.initialize=t=>{if(!(t instanceof g))throw new Error("FadeInPass requires a RenderProgram");n=t.started?1:0,d=!0,U=t,l=t.renderer.gl,F=l.getUniformLocation(U.program,"useDepthFade"),l.uniform1i(F,1),Q=l.getUniformLocation(U.program,"depthFade"),l.uniform1f(Q,n)},this.render=()=>{var e;d&&!(null===(e=U.renderData)||void 0===e?void 0:e.updating)&&(l.useProgram(U.program),n=Math.min(n+.01*t,1),n>=1&&(d=!1,l.uniform1i(F,0)),l.uniform1f(Q,n))}}dispose(){}}exports.E=C,exports.J=class{static async LoadAsync(t,U,l,F,Q=!1){const n=await W(t,Q),d=await h(n,F);return this._ParseSplatvBuffer(d.buffer,U,l)}static async LoadFromFileAsync(t,U,l,F){const Q=new FileReader;let n=null;if(Q.onload=t=>{n=this._ParseSplatvBuffer(t.target.result,U,l)},Q.onprogress=t=>{null==F||F(t.loaded/t.total)},Q.readAsArrayBuffer(t),await new Promise((t=>{Q.onloadend=()=>{t()}})),!n)throw new Error("Failed to load splatv file");return n}static _ParseSplatvBuffer(l,F,Q){let n=null;const d=(l,d,e)=>{if("magic"===l.type){const t=new Int32Array(d.buffer);if(26443!==t[0])throw new Error("Invalid splatv file");e.push({size:t[1],type:"chunks"})}else if("chunks"===l.type){const l=JSON.parse(new TextDecoder("utf-8").decode(d));if(0==l.length)throw new Error("Invalid splatv file");l.length>1&&console.warn("Splatv file contains more than one chunk, only the first one will be loaded");const F=l[0],n=F.cameras;if(Q&&n&&n.length){const l=n[0],F=new t(l.position[0],l.position[1],l.position[2]),d=U.FromMatrix3(new A(l.rotation[0][0],l.rotation[0][1],l.rotation[0][2],l.rotation[1][0],l.rotation[1][1],l.rotation[1][2],l.rotation[2][0],l.rotation[2][1],l.rotation[2][2]));Q.position=F,Q.rotation=d}e.push(F)}else if("splat"===l.type){const t=B.Deserialize(d,l.texwidth,l.texheight),U=new i(t);F.addObject(U),n=U}},e=new Uint8Array(l),V=[{size:8,type:"magic",texwidth:0,texheight:0}];let Z=V.shift(),a=new Uint8Array(Z.size),R=0,s=0;for(;Z;){for(;R<Z.size;){const t=Math.min(Z.size-R,e.length-s);a.set(e.subarray(s,s+t),R),R+=t,s+=t}if(d(Z,a,V),n)return n;Z=V.shift(),Z&&(a=new Uint8Array(Z.size),R=0)}throw new Error("Invalid splatv file")}},exports.W=class extends l{constructor(){super(),this._objects=[],this.addObject=t=>{this.objects.push(t),this.dispatchEvent(new Q(t))},this.removeObject=t=>{const U=this.objects.indexOf(t);if(U<0)throw new Error("Object not found in scene");this.objects.splice(U,1),this.dispatchEvent(new n(t))},this.findObject=t=>{for(const U of this.objects)if(t(U))return U},this.findObjectOfType=t=>{for(const U of this.objects)if(U instanceof t)return U},this.reset=()=>{const t=this.objects.slice();for(const U of t)this.removeObject(U)},this.reset()}saveToFile(t=null,U=null){if(!document)return;if(U){if("splat"!==U&&"ply"!==U)throw new Error("Invalid format. Must be 'splat' or 'ply'")}else U="splat";if(!t){const l=new Date;t=`scene-${l.getFullYear()}-${l.getMonth()+1}-${l.getDate()}.${U}`}const l=[];let F=0;for(const A of this.objects)if(A.applyRotation(),A.applyScale(),A.applyPosition(),A instanceof R){const t=A.data.serialize();l.push(t),F+=A.data.vertexCount}const Q=new Uint8Array(F*V.RowLength);let n,d=0;for(const A of l)Q.set(A,d),d+=A.length;if("ply"===U){const t=Z.SplatToPLY(Q.buffer,F);n=new Blob([t],{type:"application/octet-stream"})}else n=new Blob([Q.buffer],{type:"application/octet-stream"});const e=document.createElement("a");e.download=t,e.href=URL.createObjectURL(n),e.click()}get objects(){return this._objects}},exports.Y=class{constructor(t=null,U=null){this._backgroundColor=new C;const l=t||document.createElement("canvas");t||(l.style.display="block",l.style.boxSizing="border-box",l.style.width="100%",l.style.height="100%",l.style.margin="0",l.style.padding="0",document.body.appendChild(l)),l.style.background=this._backgroundColor.toHexString(),this._canvas=l,this._gl=l.getContext("webgl2",{antialias:!1});const F=U||[];U||F.push(new N),this._renderProgram=new g(this,F);const Q=[this._renderProgram];this.resize=()=>{const t=l.clientWidth,U=l.clientHeight;l.width===t&&l.height===U||this.setSize(t,U)},this.setSize=(t,U)=>{l.width=t,l.height=U,this._gl.viewport(0,0,l.width,l.height);for(const l of Q)l.resize()},this.render=(t,U)=>{for(const l of Q)l.render(t,U)},this.dispose=()=>{for(const t of Q)t.dispose()},this.addProgram=t=>{Q.push(t)},this.removeProgram=t=>{const U=Q.indexOf(t);if(U<0)throw new Error("Program not found");Q.splice(U,1)},this.resize()}get canvas(){return this._canvas}get gl(){return this._gl}get renderProgram(){return this._renderProgram}get backgroundColor(){return this._backgroundColor}set backgroundColor(t){this._backgroundColor=t,this._canvas.style.background=t.toHexString()}},exports.l=U,exports.m=class{static async LoadAsync(t,U,l,F=!1){const Q=await W(t,F),n=await h(Q,l);return this.LoadFromArrayBuffer(n,U)}static async LoadFromFileAsync(t,U,l){const F=new FileReader;let Q=new R;return F.onload=t=>{Q=this.LoadFromArrayBuffer(t.target.result,U)},F.onprogress=t=>{null==l||l(t.loaded/t.total)},F.readAsArrayBuffer(t),await new Promise((t=>{F.onloadend=()=>{t()}})),Q}static LoadFromArrayBuffer(t,U){const l=new Uint8Array(t),F=V.Deserialize(l),Q=new R(F);return U.addObject(Q),Q}},exports.o=class extends e{constructor(U=void 0){super(),this._data=U||new s,this._position=new t(0,0,-5),this.update=()=>{this.data.update(this.position,this.rotation)},this.screenPointToRay=(U,l)=>{const F=new c(U,l,-1,1),Q=this._data.projectionMatrix.invert(),n=F.multiply(Q),d=this._data.viewMatrix.invert(),e=n.multiply(d);return new t(e.x/e.w,e.y/e.w,e.z/e.w).subtract(this.position).normalize()}}get data(){return this._data}},exports.t=t,exports.u=class{constructor(l,F,Q=.5,n=.5,d=5,e=!0,V=new t){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{};let B=V.clone(),Z=B.clone(),a=Q,R=n,i=d,s=!1,c=!1,W=0,h=0,o=0;const r={};let I=!1;l.addEventListener("objectChanged",(()=>{if(I)return;const U=l.rotation.toEuler();a=-U.y,R=-U.x;const F=l.position.x-i*Math.sin(a)*Math.cos(R),Q=l.position.y+i*Math.sin(R),n=l.position.z+i*Math.cos(a)*Math.cos(R);Z=new t(F,Q,n)})),this.setCameraTarget=U=>{const F=U.x-l.position.x,Q=U.y-l.position.y,n=U.z-l.position.z;i=Math.sqrt(F*F+Q*Q+n*n),R=Math.atan2(Q,Math.sqrt(F*F+n*n)),a=-Math.atan2(F,n),Z=new t(U.x,U.y,U.z)};const m=()=>.1+.9*(i-this.minZoom)/(this.maxZoom-this.minZoom),J=t=>{r[t.code]=!0,"ArrowUp"===t.code&&(r.KeyW=!0),"ArrowDown"===t.code&&(r.KeyS=!0),"ArrowLeft"===t.code&&(r.KeyA=!0),"ArrowRight"===t.code&&(r.KeyD=!0)},b=t=>{r[t.code]=!1,"ArrowUp"===t.code&&(r.KeyW=!1),"ArrowDown"===t.code&&(r.KeyS=!1),"ArrowLeft"===t.code&&(r.KeyA=!1),"ArrowRight"===t.code&&(r.KeyD=!1)},C=t=>{S(t),s=!0,c=2===t.button,h=t.clientX,o=t.clientY,window.addEventListener("mouseup",g)},g=t=>{S(t),s=!1,c=!1,window.removeEventListener("mouseup",g)},N=U=>{if(S(U),!s||!l)return;const F=U.clientX-h,Q=U.clientY-o;if(c){const U=m(),n=-F*this.panSpeed*.01*U,d=-Q*this.panSpeed*.01*U,e=A.RotationFromQuaternion(l.rotation).buffer,V=new t(e[0],e[3],e[6]),B=new t(e[1],e[4],e[7]);Z=Z.add(V.multiply(n)),Z=Z.add(B.multiply(d))}else a-=F*this.orbitSpeed*.003,R+=Q*this.orbitSpeed*.003,R=Math.min(Math.max(R,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);h=U.clientX,o=U.clientY},G=t=>{S(t);const U=m();i+=t.deltaY*this.zoomSpeed*.025*U,i=Math.min(Math.max(i,this.minZoom),this.maxZoom)},X=t=>{if(S(t),1===t.touches.length)s=!0,c=!1,h=t.touches[0].clientX,o=t.touches[0].clientY,W=0;else if(2===t.touches.length){s=!0,c=!0,h=(t.touches[0].clientX+t.touches[1].clientX)/2,o=(t.touches[0].clientY+t.touches[1].clientY)/2;const U=t.touches[0].clientX-t.touches[1].clientX,l=t.touches[0].clientY-t.touches[1].clientY;W=Math.sqrt(U*U+l*l)}},p=t=>{S(t),s=!1,c=!1},E=U=>{if(S(U),s&&l)if(c){const F=m(),Q=U.touches[0].clientX-U.touches[1].clientX,n=U.touches[0].clientY-U.touches[1].clientY,d=Math.sqrt(Q*Q+n*n);i+=(W-d)*this.zoomSpeed*.1*F,i=Math.min(Math.max(i,this.minZoom),this.maxZoom),W=d;const e=(U.touches[0].clientX+U.touches[1].clientX)/2,V=(U.touches[0].clientY+U.touches[1].clientY)/2,B=e-h,a=V-o,R=A.RotationFromQuaternion(l.rotation).buffer,s=new t(R[0],R[3],R[6]),c=new t(R[1],R[4],R[7]);Z=Z.add(s.multiply(-B*this.panSpeed*.025*F)),Z=Z.add(c.multiply(-a*this.panSpeed*.025*F)),h=e,o=V}else{const t=U.touches[0].clientX-h,l=U.touches[0].clientY-o;a-=t*this.orbitSpeed*.003,R+=l*this.orbitSpeed*.003,R=Math.min(Math.max(R,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),h=U.touches[0].clientX,o=U.touches[0].clientY}},y=(t,U,l)=>(1-l)*t+l*U;this.update=()=>{I=!0,Q=y(Q,a,this.dampening),n=y(n,R,this.dampening),d=y(d,i,this.dampening),B=B.lerp(Z,this.dampening);const F=B.x+d*Math.sin(Q)*Math.cos(n),e=B.y-d*Math.sin(n),V=B.z-d*Math.cos(Q)*Math.cos(n);l.position=new t(F,e,V);const s=B.subtract(l.position).normalize(),c=Math.asin(-s.y),W=Math.atan2(s.x,s.z);l.rotation=U.FromEuler(new t(c,W,0));const h=.025,o=.01,m=A.RotationFromQuaternion(l.rotation).buffer,J=new t(-m[2],-m[5],-m[8]),b=new t(m[0],m[3],m[6]);r.KeyS&&(Z=Z.add(J.multiply(h))),r.KeyW&&(Z=Z.subtract(J.multiply(h))),r.KeyA&&(Z=Z.subtract(b.multiply(h))),r.KeyD&&(Z=Z.add(b.multiply(h))),r.KeyE&&(a+=o),r.KeyQ&&(a-=o),r.KeyR&&(R+=o),r.KeyF&&(R-=o),I=!1};const S=t=>{t.preventDefault(),t.stopPropagation()};this.dispose=()=>{F.removeEventListener("dragenter",S),F.removeEventListener("dragover",S),F.removeEventListener("dragleave",S),F.removeEventListener("contextmenu",S),F.removeEventListener("mousedown",C),F.removeEventListener("mousemove",N),F.removeEventListener("wheel",G),F.removeEventListener("touchstart",X),F.removeEventListener("touchend",p),F.removeEventListener("touchmove",E),e&&(window.removeEventListener("keydown",J),window.removeEventListener("keyup",b))},e&&(window.addEventListener("keydown",J),window.addEventListener("keyup",b)),F.addEventListener("dragenter",S),F.addEventListener("dragover",S),F.addEventListener("dragleave",S),F.addEventListener("contextmenu",S),F.addEventListener("mousedown",C),F.addEventListener("mousemove",N),F.addEventListener("wheel",G),F.addEventListener("touchstart",X),F.addEventListener("touchend",p),F.addEventListener("touchmove",E),this.update()}},exports.x=class extends I{constructor(t,U=[]){super(t,U),this._renderData=null,this._depthIndex=new Uint32Array,this._splatTexture=null;const l=t.canvas,Q=t.gl;let n,d,e,A,V,B,Z,a,R,s,c;this._resize=()=>{this._camera&&(this._camera.data.setSize(l.width,l.height),this._camera.update(),d=Q.getUniformLocation(this.program,"projection"),Q.uniformMatrix4fv(d,!1,this._camera.data.projectionMatrix.buffer),e=Q.getUniformLocation(this.program,"viewport"),Q.uniform2fv(e,new Float32Array([l.width,l.height])))};const W=()=>{null!==t.renderProgram.worker?(n=t.renderProgram.worker,n.onmessage=t=>{if(t.data.depthIndex){const{depthIndex:U}=t.data;this._depthIndex=U,Q.bindBuffer(Q.ARRAY_BUFFER,c),Q.bufferData(Q.ARRAY_BUFFER,U,Q.STATIC_DRAW)}}):console.error("Render program is not initialized. Cannot render without worker")};this._initialize=()=>{if(!this._scene||!this._camera)return void console.error("Cannot render without scene and camera");this._resize(),this._scene.addEventListener("objectAdded",h),this._scene.addEventListener("objectRemoved",o);for(const F of this._scene.objects)F instanceof i&&(null===this._renderData?(this._renderData=F.data,F.addEventListener("objectChanged",r)):console.warn("Multiple Splatv objects are not currently supported"));if(null===this._renderData)return void console.error("Cannot render without Splatv object");A=Q.getUniformLocation(this.program,"focal"),Q.uniform2fv(A,new Float32Array([this._camera.data.fx,this._camera.data.fy])),V=Q.getUniformLocation(this.program,"view"),Q.uniformMatrix4fv(V,!1,this._camera.data.viewMatrix.buffer),this._splatTexture=Q.createTexture(),B=Q.getUniformLocation(this.program,"u_texture"),Q.uniform1i(B,0),Z=Q.getUniformLocation(this.program,"time"),Q.uniform1f(Z,Math.sin(Date.now()/1e3)/2+.5),s=Q.createBuffer(),Q.bindBuffer(Q.ARRAY_BUFFER,s),Q.bufferData(Q.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),Q.STATIC_DRAW),a=Q.getAttribLocation(this.program,"position"),Q.enableVertexAttribArray(a),Q.vertexAttribPointer(a,2,Q.FLOAT,!1,0,0),c=Q.createBuffer(),R=Q.getAttribLocation(this.program,"index"),Q.enableVertexAttribArray(R),Q.bindBuffer(Q.ARRAY_BUFFER,c),W(),Q.activeTexture(Q.TEXTURE0),Q.bindTexture(Q.TEXTURE_2D,this._splatTexture),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_S,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_T,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MIN_FILTER,Q.NEAREST),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MAG_FILTER,Q.NEAREST),Q.texImage2D(Q.TEXTURE_2D,0,Q.RGBA32UI,this._renderData.width,this._renderData.height,0,Q.RGBA_INTEGER,Q.UNSIGNED_INT,this._renderData.data);const t=this._renderData.positions,U=new Float32Array((new F).buffer),l=new Uint32Array(this._renderData.vertexCount);l.fill(0),n.postMessage({sortData:{positions:t,transforms:U,transformIndices:l,vertexCount:this._renderData.vertexCount}},[t.buffer,U.buffer,l.buffer])};const h=t=>{const U=t;U.object instanceof i&&(null===this._renderData?(this._renderData=U.object.data,U.object.addEventListener("objectChanged",r)):console.warn("Splatv not supported by default RenderProgram. Use VideoRenderProgram instead.")),this.dispose()},o=t=>{const U=t;U.object instanceof i&&this._renderData===U.object.data&&(this._renderData=null,U.object.removeEventListener("objectChanged",r)),this.dispose()},r=t=>{const U=t;U.object instanceof i&&this._renderData===U.object.data&&this.dispose()};this._render=()=>{this._scene&&this._camera?this._renderData?(this._camera.update(),n.postMessage({viewProj:this._camera.data.viewProj.buffer}),Q.viewport(0,0,l.width,l.height),Q.clearColor(0,0,0,0),Q.clear(Q.COLOR_BUFFER_BIT),Q.disable(Q.DEPTH_TEST),Q.enable(Q.BLEND),Q.blendFuncSeparate(Q.ONE_MINUS_DST_ALPHA,Q.ONE,Q.ONE_MINUS_DST_ALPHA,Q.ONE),Q.blendEquationSeparate(Q.FUNC_ADD,Q.FUNC_ADD),Q.uniformMatrix4fv(d,!1,this._camera.data.projectionMatrix.buffer),Q.uniformMatrix4fv(V,!1,this._camera.data.viewMatrix.buffer),Q.uniform1f(Z,Math.sin(Date.now()/1e3)/2+.5),Q.bindBuffer(Q.ARRAY_BUFFER,s),Q.vertexAttribPointer(a,2,Q.FLOAT,!1,0,0),Q.bindBuffer(Q.ARRAY_BUFFER,c),Q.bufferData(Q.ARRAY_BUFFER,this._depthIndex,Q.STATIC_DRAW),Q.vertexAttribIPointer(R,1,Q.INT,0,0),Q.vertexAttribDivisor(R,1),Q.drawArraysInstanced(Q.TRIANGLE_FAN,0,4,this._renderData.vertexCount)):console.warn("Cannot render without Splatv object"):console.error("Cannot render without scene and camera")},this._dispose=()=>{if(this._scene&&this._camera){this._scene.removeEventListener("objectAdded",h),this._scene.removeEventListener("objectRemoved",o);for(const t of this._scene.objects)t instanceof i&&this._renderData===t.data&&(this._renderData=null,t.removeEventListener("objectChanged",r));null==n||n.terminate(),Q.deleteTexture(this._splatTexture),Q.deleteBuffer(c),Q.deleteBuffer(s)}else console.error("Cannot dispose without scene and camera")}}get renderData(){return this._renderData}_getVertexSource(){return"#version 300 es\nprecision highp float;\nprecision highp int;\n  \nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\nuniform float time;\n  \nin vec2 position;\nin int index;\n  \nout vec4 vColor;\nout vec2 vPosition;\n  \nvoid main () {\n    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\n    uvec4 motion1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 3u, uint(index) >> 10), 0);\n    vec2 trbf = unpackHalf2x16(motion1.w);\n    float dt = time - trbf.x;\n\n    float topacity = exp(-1.0 * pow(dt / trbf.y, 2.0));\n    if(topacity < 0.02) return;\n\n    uvec4 motion0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 2u, uint(index) >> 10), 0);\n    uvec4 static0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2), uint(index) >> 10), 0);\n\n    vec2 m0 = unpackHalf2x16(motion0.x), m1 = unpackHalf2x16(motion0.y), m2 = unpackHalf2x16(motion0.z), \n         m3 = unpackHalf2x16(motion0.w), m4 = unpackHalf2x16(motion1.x); \n      \n    vec4 trot = vec4(unpackHalf2x16(motion1.y).xy, unpackHalf2x16(motion1.z).xy) * dt;\n    vec3 tpos = (vec3(m0.xy, m1.x) * dt + vec3(m1.y, m2.xy) * dt*dt + vec3(m3.xy, m4.x) * dt*dt*dt);\n      \n    vec4 cam = view * vec4(uintBitsToFloat(static0.xyz) + tpos, 1);\n    vec4 pos = projection * cam;\n  \n    float clip = 1.2 * pos.w;\n    if (pos.z < -clip || pos.x < -clip || pos.x > clip || pos.y < -clip || pos.y > clip) return;\n    uvec4 static1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 1u, uint(index) >> 10), 0);\n\n    vec4 rot = vec4(unpackHalf2x16(static0.w).xy, unpackHalf2x16(static1.x).xy) + trot;\n    vec3 scale = vec3(unpackHalf2x16(static1.y).xy, unpackHalf2x16(static1.z).x);\n    rot /= sqrt(dot(rot, rot));\n  \n    mat3 S = mat3(scale.x, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, scale.z);\n    mat3 R = mat3(\n        1.0 - 2.0 * (rot.z * rot.z + rot.w * rot.w), 2.0 * (rot.y * rot.z - rot.x * rot.w), 2.0 * (rot.y * rot.w + rot.x * rot.z),\n        2.0 * (rot.y * rot.z + rot.x * rot.w), 1.0 - 2.0 * (rot.y * rot.y + rot.w * rot.w), 2.0 * (rot.z * rot.w - rot.x * rot.y),\n        2.0 * (rot.y * rot.w - rot.x * rot.z), 2.0 * (rot.z * rot.w + rot.x * rot.y), 1.0 - 2.0 * (rot.y * rot.y + rot.z * rot.z));\n    mat3 M = S * R;\n    mat3 Vrk = 4.0 * transpose(M) * M;\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n  \n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n  \n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n  \n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n      \n    uint rgba = static1.w;\n    vColor = \n        clamp(pos.z/pos.w+1.0, 0.0, 1.0) * \n        vec4(1.0, 1.0, 1.0, topacity) *\n        vec4(\n            (rgba) & 0xffu, \n            (rgba >> 8) & 0xffu, \n            (rgba >> 16) & 0xffu, \n            (rgba >> 24) & 0xffu) / 255.0;\n\n    vec2 vCenter = vec2(pos) / pos.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis / viewport \n        + position.y * minorAxis / viewport, 0.0, 1.0);\n\n    vPosition = position;\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision highp float;\n  \nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n"}};
